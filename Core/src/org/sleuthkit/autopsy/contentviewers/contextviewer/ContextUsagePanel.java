/*
 * Autopsy Forensic Browser
 *
 * Copyright 2020-2021 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.contentviewers.contextviewer;

import java.util.ArrayList;
import java.util.List;
import org.sleuthkit.autopsy.contentviewers.layout.ContentViewerDefaults;
import org.sleuthkit.autopsy.directorytree.DirectoryTreeTopComponent;
import org.sleuthkit.datamodel.BlackboardArtifact;
import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE.TSK_ASSOCIATED_OBJECT;

/**
 * Displays additional context for the selected file, such as its source, and
 * usage, if known.
 *
 */
public final class ContextUsagePanel extends javax.swing.JPanel implements ContextViewer.DateTimePanel {

    private static final long serialVersionUID = 1L;

    // defines a list of artifacts that provide context for a file
    private static final List<BlackboardArtifact.ARTIFACT_TYPE> SOURCE_CONTEXT_ARTIFACTS = new ArrayList<>();

    static {
        SOURCE_CONTEXT_ARTIFACTS.add(TSK_ASSOCIATED_OBJECT);
    }

    private final BlackboardArtifact sourceContextArtifact;

    private final Long dateTime;

    /**
     * Creates new form ContextViewer
     */
    public ContextUsagePanel(String sourceName, String sourceText, BlackboardArtifact associatedArtifact, Long dateTime) {

        initComponents();
        sourceContextArtifact = associatedArtifact;
        setUsageName(sourceName);
        setUsageText(sourceText);
        this.dateTime = dateTime;
    }

    @Override
    public Long getDateTime() {
        return dateTime;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jUsageGoToResultButton = new javax.swing.JButton();
        jUsageNameLabel = new javax.swing.JLabel();
        jUsageTextLabel = new javax.swing.JLabel();

        setBackground(ContentViewerDefaults.getPanelBackground());
        setMaximumSize(new java.awt.Dimension(32767, 55));
        setMinimumSize(new java.awt.Dimension(300, 55));
        setPreferredSize(new java.awt.Dimension(495, 55));

        org.openide.awt.Mnemonics.setLocalizedText(jUsageGoToResultButton, org.openide.util.NbBundle.getMessage(ContextUsagePanel.class, "ContextUsagePanel.jUsageGoToResultButton.text")); // NOI18N
        jUsageGoToResultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUsageGoToResultButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jUsageNameLabel, org.openide.util.NbBundle.getMessage(ContextUsagePanel.class, "ContextUsagePanel.jUsageNameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jUsageTextLabel, org.openide.util.NbBundle.getMessage(ContextUsagePanel.class, "ContextUsagePanel.jUsageTextLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jUsageNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jUsageTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jUsageGoToResultButton)
                .addContainerGap(275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUsageTextLabel)
                    .addComponent(jUsageNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jUsageGoToResultButton)
                .addGap(0, 11, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jUsageGoToResultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUsageGoToResultButtonActionPerformed
        final DirectoryTreeTopComponent dtc = DirectoryTreeTopComponent.findInstance();

        // Navigate to the source context artifact.
        if (sourceContextArtifact != null) {
            dtc.viewArtifact(sourceContextArtifact);
        }
    }//GEN-LAST:event_jUsageGoToResultButtonActionPerformed

    /**
     * Sets the usage label string.
     *
     * @param nameLabel String value for usage label.
     */
    private void setUsageName(String nameLabel) {
        jUsageNameLabel.setText(nameLabel);
    }

    /**
     * Sets the Usage text string.
     *
     * @param text String value for Usage text.
     */
    private void setUsageText(String text) {
        jUsageTextLabel.setText(text);
        showUsageButton(!text.isEmpty());
        showUsageText(true);
    }

    private void showUsageText(boolean show) {
        jUsageTextLabel.setVisible(show);
    }

    private void showUsageButton(boolean show) {
        jUsageGoToResultButton.setVisible(show);
        jUsageGoToResultButton.setEnabled(show);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jUsageGoToResultButton;
    private javax.swing.JLabel jUsageNameLabel;
    private javax.swing.JLabel jUsageTextLabel;
    // End of variables declaration//GEN-END:variables
}
